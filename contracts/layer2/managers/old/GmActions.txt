
// // SPDX-License-Identifier: MIT
// pragma solidity ^0.8.3;

// import "hardhat/console.sol";

// contract GmActions {

//   event ContractRegistered(address contractAddress, uint meralType);
//   event AuthChange(address auth, bool add);

//   // MERALS
//   event InitMeral(uint meralType, uint tokenId, uint32 elf, uint16 hp, uint16 maxHp, uint16 atk, uint16 def, uint16 spd, uint16 maxStamina, uint8 element, uint8 subclass, address owner);
//   event ChangeHP(uint id, uint16 hp, bool add);
//   event ChangeXP(uint id, uint32 xp, bool add);
//   event ChangeELF(uint id, uint32 elf, bool add);
//   event ChangeStats(uint id, uint16 atk, uint16 def, uint16 spd);
//   event ChangeElement(uint id, uint8 element);
//   event MeralStatusChange(uint id, uint8 status);

//   // VERIFY OWNERSHIP
//   event OwnershipSubmit(uint txId);
//   event OwnershipApprove(address validator, uint txId);
//   event OwnershipExecute(uint txId);

//   /*///////////////////////////////////////////////////////////////
//                   STORAGE
//   //////////////////////////////////////////////////////////////*/

//   /**
//     * @dev Storage of all Meral IDs
//     * Use MeralParser to parse Type and Token ID from IDs, max 1,000,000 in a type
//     * Ethemeral Merals = 0, Monster Merals = 1 etc etc
//     * Front end must call correct ID
//     */
//   mapping(uint => Meral) public allMerals;

//   /**
//     * @dev Storage of all Meral Owners
//     * Allows owner transfer / active or not / checks / admin approve
//     */
//   mapping(uint => address) public meralOwners;

//   // include game masters
//   mapping(address => bool) public gmAddresses;

//   // addresses to type
//   mapping(address => uint) public meralType;

//   // contract address counter
//   uint public typeCounter;

//   // STATUS: 0=new, 1=pending, 2=approved
//   struct Meral {
//     uint32 elf;
//     uint32 xp;
//     uint16 hp;
//     uint16 maxHp;
//     uint16 atk;
//     uint16 def;
//     uint16 spd;
//     uint16 maxStamina;
//     uint8 element;
//     uint8 subclass;
//     uint8 status;
//   }

//   // VALIDATION /////////////////////////////////////
//   address[] public validators;
//   mapping(address => bool) public isValidator;

//   struct Transaction {
//     uint timestamp;
//     uint meralId;
//     address newOwner;
//     bool executed;
//   }

//   Transaction[] public transactions;
//   mapping(uint => mapping(address => bool)) public approved;
//   ///////////////////////////////////////////////////

//   address public gmActions;
//   address public validatorActions;


//   /*///////////////////////////////////////////////////////////////
//                   GM FUNCTIONS
//   //////////////////////////////////////////////////////////////*/
//   function changeHP(uint _id, uint16 offset, bool add) external {
//     Meral storage _meral = allMerals[_id];
//     console.log(_id, offset, add);
//     console.log(_meral.hp, _meral.atk);
//     uint16 _HP = _meral.hp;
//     uint16 newHP;

//     // safe
//     if (add) {
//       uint16 sum = _HP + offset;
//       console.log('here');
//       newHP = sum > _meral.maxHp ? _meral.maxHp : sum;
//       console.log(_meral.hp, 'hp');
//     } else {
//       if (_HP <= offset) {
//         newHP = 0;
//       } else {
//         newHP = _HP - offset;
//       }
//     }

//     _meral.hp = newHP;
//     console.log(newHP);
//     emit ChangeHP(_id, newHP, add);
//   }

//   function changeXP(uint _id, uint32 offset, bool add) external {
//     Meral storage _meral = allMerals[_id];

//     uint32 _XP = _meral.xp;
//     uint32 newXP;

//     // safe
//     if (add) {
//       uint32 sum = _XP + offset;
//       newXP = sum > 100000 ? 100000 : sum;

//     } else {
//       if (_XP <= offset) {
//         newXP = 0;
//       } else {
//         newXP = _XP - offset;
//       }
//     }

//     _meral.xp = newXP;

//     emit ChangeXP(_id, newXP, add);
//   }

//   function changeELF(uint _id, uint32 offset, bool add) external {
//     Meral storage _meral = allMerals[_id];

//     uint _ELF = uint32(_meral.elf);
//     uint newELF;

//     // safe
//     if (add) {
//       uint sum = _ELF + offset;
//       newELF = sum > 1000000 ? 1000000 : sum;
//     } else {
//       if (_ELF <= offset) {
//         newELF = 0;
//       } else {
//         newELF = _ELF - offset;
//       }
//     }

//     _meral.elf = uint32(newELF);

//     emit ChangeELF(_id, uint32(newELF), add);
//   }

//   function changeStats(uint _id, uint16 _atk, uint16 _def, uint16 _spd) external {
//     Meral storage _meral = allMerals[_id];
//     _meral.atk = _atk;
//     _meral.def = _def;
//     _meral.spd = _spd;

//     emit ChangeStats(_id, _atk, _def, _spd);
//   }

//   function changeElement(uint _id, uint8 _element) external {
//     Meral storage _meral = allMerals[_id];
//     _meral.element = _element;

//     emit ChangeElement(_id, _element);
//   }

// }